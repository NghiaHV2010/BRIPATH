
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AnswersScalarFieldEnum = {
  id: 'id',
  answer: 'answer',
  question_id: 'question_id'
};

exports.Prisma.ApplicantsScalarFieldEnum = {
  cv_id: 'cv_id',
  job_id: 'job_id',
  description: 'description',
  apply_date: 'apply_date',
  verified_date: 'verified_date',
  status: 'status',
  feedback: 'feedback'
};

exports.Prisma.AwardsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  start_date: 'start_date',
  end_date: 'end_date',
  cv_id: 'cv_id'
};

exports.Prisma.BlogsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  cover_image_url: 'cover_image_url',
  description_url: 'description_url',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id'
};

exports.Prisma.CareerPathStepsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  resources: 'resources',
  career_id: 'career_id'
};

exports.Prisma.CareerPathsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  resources: 'resources',
  level: 'level',
  estimate_duration: 'estimate_duration',
  user_id: 'user_id',
  jobspecialized_id: 'jobspecialized_id'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  category_name: 'category_name'
};

exports.Prisma.CertificatesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  link: 'link',
  description: 'description',
  start_date: 'start_date',
  end_date: 'end_date',
  cv_id: 'cv_id'
};

exports.Prisma.CompaniesScalarFieldEnum = {
  id: 'id',
  company_name: 'company_name',
  company_website: 'company_website',
  address_street: 'address_street',
  address_ward: 'address_ward',
  address_city: 'address_city',
  address_country: 'address_country',
  email: 'email',
  phone: 'phone',
  business_certificate: 'business_certificate',
  company_type: 'company_type',
  description: 'description',
  logo_url: 'logo_url',
  background_url: 'background_url',
  employees: 'employees',
  is_verified: 'is_verified',
  fax_code: 'fax_code',
  is_deleted: 'is_deleted',
  created_at: 'created_at',
  updated_at: 'updated_at',
  field_id: 'field_id',
  label_id: 'label_id'
};

exports.Prisma.CompanyActivitiesHistoryScalarFieldEnum = {
  id: 'id',
  activity_name: 'activity_name',
  time: 'time',
  company_id: 'company_id'
};

exports.Prisma.CompanyLabelsScalarFieldEnum = {
  id: 'id',
  label_name: 'label_name'
};

exports.Prisma.CompanyNotificationsScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  title: 'title',
  content: 'content',
  type: 'type',
  is_read: 'is_read',
  sent_at: 'sent_at',
  read_at: 'read_at'
};

exports.Prisma.CvsScalarFieldEnum = {
  id: 'id',
  fullname: 'fullname',
  age: 'age',
  gender: 'gender',
  address: 'address',
  email: 'email',
  introduction: 'introduction',
  soft_skills: 'soft_skills',
  primary_skills: 'primary_skills',
  phone: 'phone',
  hobbies: 'hobbies',
  others: 'others'
};

exports.Prisma.EducationsScalarFieldEnum = {
  id: 'id',
  school: 'school',
  graduated_type: 'graduated_type',
  gpa: 'gpa',
  start_date: 'start_date',
  end_date: 'end_date',
  cv_id: 'cv_id'
};

exports.Prisma.ExperiencesScalarFieldEnum = {
  id: 'id',
  company_name: 'company_name',
  title: 'title',
  description: 'description',
  start_date: 'start_date',
  end_date: 'end_date',
  cv_id: 'cv_id'
};

exports.Prisma.FeaturesScalarFieldEnum = {
  id: 'id',
  feature_name: 'feature_name',
  description: 'description',
  plan_id: 'plan_id'
};

exports.Prisma.FeedbacksScalarFieldEnum = {
  user_id: 'user_id',
  company_id: 'company_id',
  description: 'description',
  stars: 'stars',
  work_environment: 'work_environment',
  benefit: 'benefit',
  created_at: 'created_at'
};

exports.Prisma.FieldsScalarFieldEnum = {
  id: 'id',
  field_name: 'field_name'
};

exports.Prisma.FollowedCompaniesScalarFieldEnum = {
  user_id: 'user_id',
  company_id: 'company_id',
  followed_at: 'followed_at',
  is_notified: 'is_notified'
};

exports.Prisma.JobCategoriesScalarFieldEnum = {
  id: 'id',
  job_category: 'job_category',
  description: 'description'
};

exports.Prisma.JobLabelsScalarFieldEnum = {
  id: 'id',
  label_name: 'label_name'
};

exports.Prisma.JobSpecializedScalarFieldEnum = {
  id: 'id',
  job_type: 'job_type',
  description: 'description',
  jobcategory_id: 'jobcategory_id'
};

exports.Prisma.JobsScalarFieldEnum = {
  id: 'id',
  job_title: 'job_title',
  description: 'description',
  location: 'location',
  benefit: 'benefit',
  working_time: 'working_time',
  salary: 'salary',
  currency: 'currency',
  job_type: 'job_type',
  status: 'status',
  job_level: 'job_level',
  quantity: 'quantity',
  skill_tags: 'skill_tags',
  education: 'education',
  experience: 'experience',
  start_date: 'start_date',
  end_date: 'end_date',
  created_at: 'created_at',
  updated_at: 'updated_at',
  category_id: 'category_id',
  label_id: 'label_id'
};

exports.Prisma.MembershipPlansScalarFieldEnum = {
  id: 'id',
  plan_name: 'plan_name',
  description: 'description',
  price: 'price',
  duration_days: 'duration_days',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.MessagesScalarFieldEnum = {
  id: 'id',
  message_content: 'message_content',
  response_content: 'response_content',
  created_at: 'created_at',
  user_id: 'user_id'
};

exports.Prisma.PaymentsScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  payment_gateway: 'payment_gateway',
  payment_method: 'payment_method',
  transaction_id: 'transaction_id',
  status: 'status',
  created_at: 'created_at',
  user_id: 'user_id'
};

exports.Prisma.PersonalityTestResultsScalarFieldEnum = {
  user_id: 'user_id',
  question_id: 'question_id',
  answer_id: 'answer_id'
};

exports.Prisma.ProjectsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  start_date: 'start_date',
  end_date: 'end_date',
  cv_id: 'cv_id'
};

exports.Prisma.QuestionsScalarFieldEnum = {
  id: 'id',
  question: 'question'
};

exports.Prisma.ReferencesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  email: 'email',
  cv_id: 'cv_id'
};

exports.Prisma.RolesScalarFieldEnum = {
  id: 'id',
  role_name: 'role_name'
};

exports.Prisma.SavedJobsScalarFieldEnum = {
  user_id: 'user_id',
  job_id: 'job_id',
  saved_at: 'saved_at'
};

exports.Prisma.SubscriptionsScalarFieldEnum = {
  id: 'id',
  start_date: 'start_date',
  end_date: 'end_date',
  amount_paid: 'amount_paid',
  is_extended: 'is_extended',
  status: 'status',
  user_id: 'user_id',
  plan_id: 'plan_id',
  payment_id: 'payment_id'
};

exports.Prisma.UserActivitiesHistoryScalarFieldEnum = {
  id: 'id',
  activity_name: 'activity_name',
  time: 'time',
  user_id: 'user_id'
};

exports.Prisma.UserNotificationsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  title: 'title',
  content: 'content',
  type: 'type',
  is_read: 'is_read',
  sent_at: 'sent_at',
  read_at: 'read_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  avatar_url: 'avatar_url',
  email: 'email',
  phone: 'phone',
  address_street: 'address_street',
  address_ward: 'address_ward',
  address_city: 'address_city',
  address_country: 'address_country',
  gender: 'gender',
  is_deleted: 'is_deleted',
  created_at: 'created_at',
  updated_at: 'updated_at',
  role_id: 'role_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ApplicantsStatus = exports.$Enums.ApplicantsStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.Company_Type = exports.$Enums.Company_Type = {
  business_househole: 'business_househole',
  business: 'business'
};

exports.NotificationsType = exports.$Enums.NotificationsType = {
  system: 'system',
  pricing_plan: 'pricing_plan',
  applicant: 'applicant',
  followed: 'followed'
};

exports.Job_Type = exports.$Enums.Job_Type = {
  remote: 'remote',
  part_time: 'part_time',
  full_time: 'full_time',
  others: 'others'
};

exports.Job_Status = exports.$Enums.Job_Status = {
  over_due: 'over_due',
  on_going: 'on_going'
};

exports.Education = exports.$Enums.Education = {
  bachelor: 'bachelor',
  mastter: 'mastter',
  phd: 'phd',
  others: 'others',
  highschool_graduate: 'highschool_graduate'
};

exports.PaymentGateway = exports.$Enums.PaymentGateway = {
  MoMo: 'MoMo',
  Bank: 'Bank',
  ZaloPay: 'ZaloPay',
  Stripe: 'Stripe'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  bank_card: 'bank_card',
  e_wallet: 'e_wallet',
  bank_transfer: 'bank_transfer',
  QR_Code: 'QR_Code'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  success: 'success',
  failure: 'failure'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  on_going: 'on_going',
  over_date: 'over_date',
  canceled: 'canceled'
};

exports.Gender = exports.$Enums.Gender = {
  male: 'male',
  female: 'female',
  others: 'others'
};

exports.Prisma.ModelName = {
  answers: 'answers',
  applicants: 'applicants',
  awards: 'awards',
  blogs: 'blogs',
  careerPathSteps: 'careerPathSteps',
  careerPaths: 'careerPaths',
  categories: 'categories',
  certificates: 'certificates',
  companies: 'companies',
  companyActivitiesHistory: 'companyActivitiesHistory',
  companyLabels: 'companyLabels',
  companyNotifications: 'companyNotifications',
  cvs: 'cvs',
  educations: 'educations',
  experiences: 'experiences',
  features: 'features',
  feedbacks: 'feedbacks',
  fields: 'fields',
  followedCompanies: 'followedCompanies',
  jobCategories: 'jobCategories',
  jobLabels: 'jobLabels',
  jobSpecialized: 'jobSpecialized',
  jobs: 'jobs',
  membershipPlans: 'membershipPlans',
  messages: 'messages',
  payments: 'payments',
  personalityTestResults: 'personalityTestResults',
  projects: 'projects',
  questions: 'questions',
  references: 'references',
  roles: 'roles',
  savedJobs: 'savedJobs',
  subscriptions: 'subscriptions',
  userActivitiesHistory: 'userActivitiesHistory',
  userNotifications: 'userNotifications',
  users: 'users'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
