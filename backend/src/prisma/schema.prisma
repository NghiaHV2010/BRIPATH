generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model answers {
  id                     Int                      @id @default(autoincrement())
  answer                 String                   @db.VarChar(150)
  embedding              Unsupported("vector")?
  question_id            Int
  questions              questions                @relation(fields: [question_id], references: [id], onDelete: Cascade)
  personalityTestResults personalityTestResults[]
}

model applicants {
  cv_id         Int
  job_id        String
  description   String?
  apply_date    DateTime         @default(now())
  verified_date DateTime?
  status        ApplicantsStatus @default(pending)
  feedback      String?
  cvs           cvs              @relation(fields: [cv_id], references: [id], onDelete: Cascade)
  jobs          jobs             @relation(fields: [job_id], references: [id], onDelete: Cascade)

  @@id([cv_id, job_id])
}

model awards {
  id          Int       @id @default(autoincrement())
  title       String    @db.Text
  description String?   @db.Text
  start_date  DateTime? @db.Date
  end_date    DateTime? @db.Date
  cv_id       Int
  cvs         cvs       @relation(fields: [cv_id], references: [id], onDelete: Cascade)
}

model languages {
  id          Int     @id @default(autoincrement())
  name        String  @db.Text
  certificate String? @db.Text
  level       String? @db.Text
  cv_id       Int
  cvs         cvs     @relation(fields: [cv_id], references: [id], onDelete: Cascade)
}

model aiFeedbacks {
  id       Int      @id @default(autoincrement())
  role     String   @db.VarChar(50)
  job_id   String
  cv_id    Int
  is_good  Boolean  @default(false)
  saved_at DateTime @default(now())
  cvs      cvs      @relation(fields: [cv_id], references: [id], onDelete: Cascade)
  jobs     jobs     @relation(fields: [job_id], references: [id], onDelete: Cascade)
}

model blogs {
  id              Int      @id @default(autoincrement())
  title           String   @db.VarChar(255)
  cover_image_url String
  description_url String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user_id         String
  users           users    @relation(fields: [user_id], references: [id])
}

model careerPathSteps {
  id          Int         @id @default(autoincrement())
  title       String      @db.Text
  description String?     @db.Text
  resources   String?     @db.Text
  career_id   Int
  careerPaths careerPaths @relation(fields: [career_id], references: [id])
}

model careerPaths {
  id                Int               @id @default(autoincrement())
  title             String            @db.Text
  description       String?           @db.Text
  resources         String?           @db.Text
  level             String?           @db.Text
  estimate_duration String?           @db.Text
  user_id           String
  jobspecialized_id Int
  careerPathSteps   careerPathSteps[]
  jobSpecialized    jobSpecialized    @relation(fields: [jobspecialized_id], references: [id])
  users             users             @relation(fields: [user_id], references: [id])
}

model reviews {
  id         Int      @id @default(autoincrement())
  content    String   @db.VarChar(255)
  stars      Float    @db.Real
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    String
  users      users    @relation(fields: [user_id], references: [id])
}

model certificates {
  id          Int       @id @default(autoincrement())
  title       String?   @db.Text
  link        String?   @db.Text
  description String?   @db.Text
  start_date  DateTime? @db.Date
  end_date    DateTime? @db.Date
  cv_id       Int
  cvs         cvs       @relation(fields: [cv_id], references: [id], onDelete: Cascade)
}

model companies {
  id                   String              @id @default(uuid())
  company_website      String?             @db.Text
  business_certificate String?
  company_type         Company_Type        @default(business_househole)
  description          String?             @db.Text
  background_url       String?             @db.Text
  employees            Int?
  is_verified          Boolean             @default(false)
  fax_code             String?             @db.VarChar(10)
  status               ApplicantsStatus    @default(pending)
  longitude            Float?              @db.DoublePrecision
  latitude             Float?              @db.DoublePrecision
  approved_at          DateTime?
  field_id             Int?
  fields               fields?             @relation(fields: [field_id], references: [id])
  users                users?
  feedbacks            feedbacks[]
  followedCompanies    followedCompanies[]
  jobs                 jobs[]
  companyTags          companyTags[]
}

model companyTags {
  company_id String
  tag_id     Int
  companies  companies @relation(fields: [company_id], references: [id])
  tags       tags      @relation(fields: [tag_id], references: [id])

  @@id([company_id, tag_id])
}

model tags {
  id         Int           @id @default(autoincrement())
  label_name String        @unique @db.VarChar(100)
  companies  companyTags[]
}

model cvs {
  id             Int                    @id @default(autoincrement())
  fullname       String                 @db.Text
  age            Int?
  gender         String?                @db.Text
  address        String?                @db.Text
  email          String?                @db.Text
  introduction   String?                @db.Text
  soft_skills    String[]
  primary_skills String[]
  phone          String?                @db.Text
  hobbies        String?                @db.Text
  others         String?                @db.Text
  apply_job      String?                @db.Text
  career_goal    String?                @db.Text
  created_at     DateTime               @default(now())
  users_id       String
  embedding      Unsupported("vector")?
  applicants     applicants[]
  awards         awards[]
  certificates   certificates[]
  educations     educations[]
  experiences    experiences[]
  projects       projects[]
  references     references[]
  languages      languages[]
  aiFeedbacks    aiFeedbacks[]
  users          users                  @relation(fields: [users_id], references: [id])
}

model educations {
  id             Int       @id @default(autoincrement())
  school         String?   @db.Text
  graduated_type String?   @db.Text
  gpa            Float?    @db.Real
  start_date     DateTime? @db.Date
  end_date       DateTime? @db.Date
  cv_id          Int
  cvs            cvs       @relation(fields: [cv_id], references: [id], onDelete: Cascade)
}

model experiences {
  id           Int       @id @default(autoincrement())
  company_name String?   @db.Text
  title        String?   @db.Text
  description  String?   @db.Text
  start_date   DateTime? @db.Date
  end_date     DateTime? @db.Date
  cv_id        Int
  cvs          cvs       @relation(fields: [cv_id], references: [id], onDelete: Cascade)
}

model features {
  id              Int              @id @default(autoincrement())
  feature_name    String           @db.VarChar(100)
  description     String?          @db.VarChar(255)
  plan_id         Int?
  membershipPlans membershipPlans? @relation(fields: [plan_id], references: [id])
}

model feedbacks {
  user_id          String
  company_id       String
  description      String
  stars            Float     @db.Real
  work_environment String?
  benefit          String?
  created_at       DateTime  @default(now())
  companies        companies @relation(fields: [company_id], references: [id])
  users            users     @relation(fields: [user_id], references: [id])

  @@id([user_id, company_id])
}

model fields {
  id         Int         @id @default(autoincrement())
  field_name String      @unique @db.VarChar(100)
  companies  companies[]
}

model followedCompanies {
  user_id     String
  company_id  String
  followed_at DateTime  @default(now())
  is_notified Boolean   @default(true)
  companies   companies @relation(fields: [company_id], references: [id])
  users       users     @relation(fields: [user_id], references: [id])

  @@id([user_id, company_id])
}

model jobCategories {
  id             Int                    @id @default(autoincrement())
  job_category   String                 @unique @db.VarChar(100)
  description    String?                @db.VarChar(255)
  embedding      Unsupported("vector")?
  jobSpecialized jobSpecialized[]
  jobs           jobs[]
}

model jobLabels {
  id            Int    @id @default(autoincrement())
  label_name    String @unique @db.VarChar(50)
  duration_days Int?
  jobs          jobs[]
}

model jobSpecialized {
  id             Int                    @id @default(autoincrement())
  job_type       String                 @db.VarChar(100)
  description    String?                @db.VarChar(150)
  embedding      Unsupported("vector")?
  jobcategory_id Int
  careerPaths    careerPaths[]
  jobCategories  jobCategories          @relation(fields: [jobcategory_id], references: [id], onDelete: Cascade)
}

model jobs {
  id             String                 @id @default(uuid())
  job_title      String                 @db.Text
  description    String
  location       String?                @db.VarChar(200)
  benefit        String?                @db.VarChar(255)
  working_time   String?                @db.VarChar(50)
  salary         String[]               @default(["Thỏa thuận"])
  currency       String?                @default("VND") @db.VarChar(3)
  job_type       Job_Type?
  status         Job_Status?
  job_level      String                 @db.VarChar(50)
  quantity       Int?
  skill_tags     String[]
  education      Education?
  experience     String?                @db.Text
  embedding      Unsupported("vector")?
  start_date     DateTime               @default(now()) @db.Date
  end_date       DateTime?              @db.Date
  created_at     DateTime               @default(now())
  updated_at     DateTime               @updatedAt
  label_start_at DateTime? // Ngày bắt đầu gắn nhãn
  label_end_at   DateTime? // Ngày hết hạn nhãn
  jobCategory_id Int?
  label_id       Int?
  company_id     String
  companies      companies              @relation(fields: [company_id], references: [id])
  applicants     applicants[]
  jobCategories  jobCategories?         @relation(fields: [jobCategory_id], references: [id])
  jobLabels      jobLabels?             @relation(fields: [label_id], references: [id])
  savedJobs      savedJobs[]
  aiFeedbacks    aiFeedbacks[]
}

model membershipPlans {
  id              Int     @id @default(autoincrement())
  plan_name       String  @db.VarChar(50)
  description     String?
  price           BigInt
  duration_months Int     @db.SmallInt
  is_active       Boolean @default(true)

  //Features
  urgent_jobs_limit    Int?
  quality_jobs_limit   Int?
  total_jobs_limit     Int?
  ai_matchings         Boolean? @default(false)
  ai_networking_limit  Int?
  verified_badge       Boolean? @default(false)
  recommended_labels   Boolean? @default(false)
  highlighted_hot_jobs Boolean? @default(false)

  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  features      features[]
  subscriptions subscriptions[]
}

model messages {
  id               Int      @default(autoincrement())
  message_content  String?
  response_content String?
  created_at       DateTime @default(now())
  user_id          String
  users            users    @relation(fields: [user_id], references: [id])

  @@id([id, user_id])
}

model payments {
  id              String         @id @default(uuid())
  amount          BigInt
  currency        String?        @db.VarChar(10)
  payment_gateway PaymentGateway
  payment_method  PaymentMethod
  transaction_id  String?        @db.VarChar(100)
  status          PaymentStatus
  created_at      DateTime       @default(now())
  user_id         String
  users           users          @relation(fields: [user_id], references: [id])
  subscriptions   subscriptions?
}

model vnpayOrders {
  vnp_TxnRef String   @id
  user_id    String
  amount     BigInt
  created_at DateTime @default(now())
  users      users    @relation(fields: [user_id], references: [id])
}

model zalopayOrders {
  app_trans_id String   @id
  user_id      String
  amount       BigInt
  created_at   DateTime @default(now())
  users        users    @relation(fields: [user_id], references: [id])
}

model personalityTestResults {
  user_id     String
  question_id Int
  answer_id   Int
  answers     answers   @relation(fields: [answer_id], references: [id])
  questions   questions @relation(fields: [question_id], references: [id])
  users       users     @relation(fields: [user_id], references: [id])

  @@id([user_id, question_id, answer_id])
}

model projects {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String?   @db.Text
  start_date  DateTime? @db.Date
  end_date    DateTime? @db.Date
  cv_id       Int
  cvs         cvs       @relation(fields: [cv_id], references: [id], onDelete: Cascade)
}

model questions {
  id                     Int                      @id @default(autoincrement())
  question               String                   @unique @db.VarChar(100)
  answers                answers[]
  personalityTestResults personalityTestResults[]
}

model references {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(100)
  phone String? @db.VarChar(12)
  email String? @db.VarChar(50)
  cv_id Int
  cvs   cvs     @relation(fields: [cv_id], references: [id], onDelete: Cascade)
}

model roles {
  id        Int     @id @default(autoincrement())
  role_name String  @unique @db.VarChar(50)
  users     users[]
}

model savedJobs {
  user_id  String
  job_id   String
  saved_at DateTime @default(now())
  jobs     jobs     @relation(fields: [job_id], references: [id])
  users    users    @relation(fields: [user_id], references: [id])

  @@id([user_id, job_id])
}

model subscriptions {
  id                     String             @id @default(uuid())
  start_date             DateTime           @default(now())
  end_date               DateTime
  amount_paid            BigInt
  remaining_urgent_jobs  Int                @default(0) // Việc gấp còn lại
  remaining_quality_jobs Int                @default(0) // Việc chất còn lại
  remaining_total_jobs   Int                @default(0) // Tổng việc còn lại
  is_extended            Boolean            @default(false)
  status                 SubscriptionStatus @default(on_going)
  user_id                String
  plan_id                Int
  payment_id             String             @unique
  payments               payments           @relation(fields: [payment_id], references: [id])
  membershipPlans        membershipPlans    @relation(fields: [plan_id], references: [id])
  users                  users              @relation(fields: [user_id], references: [id])
}

model userActivitiesHistory {
  id            Int      @default(autoincrement())
  activity_name String   @db.VarChar(100)
  time          DateTime @default(now())
  user_id       String
  users         users    @relation(fields: [user_id], references: [id])

  @@id([id, user_id])
}

model userNotifications {
  id      Int               @default(autoincrement())
  user_id String
  title   String            @db.VarChar(150)
  content String?           @db.VarChar(255)
  type    NotificationsType @default(system)
  is_read Boolean           @default(false)
  sent_at DateTime          @default(now())
  read_at DateTime?
  users   users             @relation(fields: [user_id], references: [id])

  @@id([id, user_id])
}

model events {
  id           String           @id @default(uuid())
  title        String           @db.VarChar(200)
  description  String           @db.Text
  start_date   DateTime         @db.Date
  end_date     DateTime?        @db.Date
  working_time String?          @db.VarChar(100)
  banner_url   String?          @db.Text
  quantity     Int?             @db.Integer
  status       ApplicantsStatus @default(pending)
  approved_at  DateTime?
  user_id      String
  users        users            @relation(fields: [user_id], references: [id])
  volunteers   volunteers[]
}

model volunteers {
  event_id      String
  user_id       String
  description   String           @db.Text
  apply_date    DateTime         @default(now())
  verified_date DateTime?
  feedback      String?          @db.VarChar(255)
  status        ApplicantsStatus @default(pending)
  users         users            @relation(fields: [user_id], references: [id])
  events        events           @relation(fields: [event_id], references: [id])

  @@id([event_id, user_id])
}

model users {
  id                     String                   @id @default(uuid())
  username               String                   @db.VarChar(100)
  password               String                   @db.VarChar(255)
  avatar_url             String?                  @db.Text
  email                  String                   @unique @db.VarChar(50)
  phone                  String?                  @unique @db.VarChar(12)
  address_street         String?                  @db.VarChar(50)
  address_ward           String?                  @db.VarChar(50)
  address_city           String?                  @db.VarChar(50)
  address_country        String?                  @db.VarChar(50)
  gender                 Gender?
  firebase_uid           String?                  @unique @db.VarChar(50)
  is_deleted             Boolean                  @default(false)
  last_loggedIn          DateTime?
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  role_id                Int
  phone_verified         Boolean                  @default(false)
  company_id             String?                  @unique
  events                 events[]
  volunteers             volunteers[]
  cvs                    cvs[]
  blogs                  blogs[]
  careerPaths            careerPaths[]
  companies              companies?               @relation(fields: [company_id], references: [id], onDelete: Cascade)
  feedbacks              feedbacks[]
  followedCompanies      followedCompanies[]
  messages               messages[]
  payments               payments[]
  personalityTestResults personalityTestResults[]
  savedJobs              savedJobs[]
  subscriptions          subscriptions[]
  userActivitiesHistory  userActivitiesHistory[]
  reviews                reviews[]
  userNotifications      userNotifications[]
  roles                  roles                    @relation(fields: [role_id], references: [id])
  vnpayOrders            vnpayOrders[]
  zalopayOrders          zalopayOrders[]
}

enum ApplicantsStatus {
  pending  @map("Đang chờ")
  approved @map("Chấp nhận")
  rejected @map("Từ chối")
}

enum Company_Type {
  business_househole @map("Hộ kinh doanh")
  business           @map("Doanh nghiệp")
}

enum Education {
  bachelor            @map("Cử nhân")
  master              @map("Thạc sĩ")
  phd                 @map("Tiến sĩ")
  others              @map("Khác")
  highschool_graduate @map("Tốt nghiệp trung học phổ thông")
}

enum Gender {
  male   @map("Nam")
  female @map("Nữ")
  others @map("Khác")
}

enum Job_Status {
  over_due @map("Hết hạn")
  on_going @map("Đang mở")
}

enum Job_Type {
  remote
  part_time @map("Part time")
  full_time @map("Full time")
  hybrid
  others    @map("Khác")
}

enum NotificationsType {
  system       @map("Hệ thống")
  pricing_plan @map("Gói đăng ký")
  applicant    @map("Hồ sơ")
  followed     @map("Đang theo dõi")
}

enum PaymentGateway {
  MoMo
  Bank
  ZaloPay
  Stripe
}

enum PaymentMethod {
  bank_card     @map("Thẻ ngân hàng")
  e_wallet      @map("Ví điện tử")
  bank_transfer @map("Chuyển khoản")
  QR_Code       @map("Mã QR")
}

enum PaymentStatus {
  success @map("Thành công")
  failure @map("Thất bại")
}

enum SubscriptionStatus {
  on_going  @map("Còn hạn")
  over_date @map("Hết hạn")
  canceled  @map("Đã hủy")
}
