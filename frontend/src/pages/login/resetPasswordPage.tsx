import { useEffect, useMemo, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { resetPasswordApi } from "../../api/user_api"; // <-- API ƒë∆∞·ª£c gi·ªØ l·∫°i
import { Eye, EyeOff } from "lucide-react";
import { DotLottieReact } from "@lottiefiles/dotlottie-react";

export default function ResetPasswordPage() {
  // ƒê·ªçc token t·ª´ URL
  const params = useParams<{ token?: string }>();
  const rawToken = params.token;
  const navigate = useNavigate();
  // L∆∞u token v√†o state ƒë·ªÉ s·ª≠ d·ª•ng cho API, tr√°nh b·ªã m·∫•t
  const [token] = useState<string | undefined>(rawToken);

  // X√≥a token kh·ªèi URL ngay sau khi load, tƒÉng b·∫£o m·∫≠t
  useEffect(() => {
    if (rawToken) {
      try {
        // D√πng history.replaceState ƒë·ªÉ thay th·∫ø token trong URL
        const newUrl = window.location.pathname.replace(`/${rawToken}`, "");
        // ƒê·∫£m b·∫£o token ƒë∆∞·ª£c lo·∫°i b·ªè kh·ªèi path, kh√¥ng ch·∫°m v√†o query params
        window.history.replaceState({}, "", newUrl + window.location.search);
      } catch (e) {
        console.warn("Could not replace history state:", e);
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Ch·ªâ ch·∫°y m·ªôt l·∫ßn khi component mount

  const [password, setPassword] = useState("");
  const [confirm, setConfirm] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [done, setDone] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Regex: T·ªëi thi·ªÉu 8 k√Ω t·ª± v√† c√≥ √≠t nh·∫•t 1 ch·ªØ s·ªë
  const validatePassword = (pw: string) => /^(?=.*\d).{8,}$/.test(pw);

  const hasDigit = validatePassword; // re-use regex
  const hasMinLength = (pw: string) => pw.length >= 8;
  const passwordsMatch = (pw: string, conf: string) =>
    pw && conf && pw === conf;

  const canSubmit = useMemo(() => {
    return (
      !!token && validatePassword(password) && password === confirm && !loading
    );
  }, [token, password, confirm, loading]);

  const handleSubmit = async () => {
    setError(null);
    if (!token) return setError("Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
    if (!validatePassword(password))
      return setError("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª± v√† 1 ch·ªØ s·ªë.");
    if (password !== confirm) return setError("X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp.");

    try {
      setLoading(true);
      // G·ª≠i token v√† m·∫≠t kh·∫©u m·ªõi ƒë·∫øn API
      const res = await resetPasswordApi(token, password);

      // Gi·∫£ ƒë·ªãnh API tr·∫£ v·ªÅ { success: true }
      if (res && res.success) {
        setDone(true);
        // redirect handled by effect below
      } else {
        // X·ª≠ l√Ω th√¥ng b√°o l·ªói t·ª´ API
        setError(res?.message || "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i.");
      }
    } catch (err: unknown) {
      // X·ª≠ l√Ω l·ªói k·∫øt n·ªëi ho·∫∑c l·ªói kh√¥ng mong mu·ªën
      let message = "L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i.";
      if (err instanceof Error) message = err.message;
      else if (typeof err === "string") message = err;
      setError(message);
    } finally {
      setLoading(false);
    }
  };

  // --- UI TH√ÄNH C√îNG (Gi·ªØ nguy√™n t√¥ng Xanh l√°) ---
  const [redirectIn, setRedirectIn] = useState(5);

  useEffect(() => {
    if (!done) return;
    setRedirectIn(5);
    const interval = setInterval(() => {
      setRedirectIn((prev) => {
        if (prev <= 1) {
          clearInterval(interval);
          navigate("/login");
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    return () => clearInterval(interval);
  }, [done, navigate]);

  if (done) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-green-100 via-emerald-200 to-teal-100">
        <div className="bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full mx-4 text-center animate-fade-in">
          <div className="flex justify-center mb-4">
            <DotLottieReact
              src="../../../public/animations/Success Check.json"
              autoplay
              loop={false}
              style={{ width: 120, height: 120 }}
            />
          </div>

          <h2 className="text-2xl font-bold text-gray-800 mb-3">
            ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng
          </h2>
          <p className="text-gray-600 text-sm">
            M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t. T·ª± ƒë·ªông chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p
            trong{" "}
            <span className="font-medium text-emerald-600">{redirectIn}s</span>
            ...
          </p>
        </div>
      </div>
    );
  }

  // --- UI ƒê·∫∂T L·∫†I M·∫¨T KH·∫®U (2 C·ªòT) - T√¥ng ƒê·ªè/Cam/V√†ng ---
  return (
    <div className="min-h-screen flex">
      {/* ‚¨ÖÔ∏è LEFT SIDE - Gradient Background (ƒê·ªè/Cam/V√†ng) */}
      <div className="hidden lg:flex lg:w-1/2 bg-gradient-to-br from-orange-400 via-red-500 to-pink-600 p-12 flex-col justify-center relative overflow-hidden">
        <div className="relative z-10 text-white animate-fade-in">
          <h1 className="text-4xl font-bold mb-2 animate-slide-up">BRIPATH</h1>
          <div className="space-y-4 mt-16 animate-slide-up-delay">
            <h2 className="text-5xl font-light leading-tight">
              B·∫£o m·∫≠t l√† tr√™n h·∫øt.
              <br />
              <span className="text-yellow-200">H√£y ch·ªçn m·ªôt m·∫≠t kh·∫©u</span>
              <br />
              <span className="text-yellow-200">
                m·∫°nh v√† d·ªÖ nh·ªõ cho l·∫ßn ƒëƒÉng nh·∫≠p t·ªõi.
              </span>
            </h2>
          </div>
        </div>
        <div className="absolute top-10 right-10 w-32 h-32 bg-white/10 rounded-full blur-xl animate-float"></div>
        <div className="absolute bottom-20 left-20 w-20 h-20 bg-white/10 rounded-full blur-lg animate-float-delay"></div>
      </div>

      {/* ‚û°Ô∏è RIGHT SIDE - Content Card */}
      <div className="flex-1 flex items-center justify-center p-8 bg-gray-50">
        <div className="w-full max-w-md animate-fade-in-right">
          <div className="bg-white rounded-2xl shadow-xl border border-orange-200 p-8 transform transition-all duration-300 hover:shadow-2xl">
            <div className="text-center mb-6">
              <div className="inline-flex items-center justify-center w-16 h-16 bg-orange-100 rounded-full mb-4">
                üîë
              </div>
              <h2 className="text-2xl font-bold text-gray-800 mb-2">
                ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
              </h2>
              <p className="text-gray-600 text-sm">
                Nh·∫≠p m·∫≠t kh·∫©u m·ªõi. Token ƒë√£ ƒë∆∞·ª£c x√°c minh th√†nh c√¥ng.
              </p>
            </div>

            {/* M·∫≠t kh·∫©u m·ªõi */}
            <div className="mb-4">
              <label className="text-sm text-gray-600 mb-1 block font-medium">
                M·∫≠t kh·∫©u m·ªõi
              </label>
              <div className="relative">
                <Input
                  type={showPassword ? "text" : "password"}
                  placeholder="M·∫≠t kh·∫©u m·ªõi"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="h-12 transition-all duration-200 focus:scale-[1.02] focus:shadow-md pr-10"
                />
                <button
                  tabIndex={-1}
                  type="button"
                  aria-label={showPassword ? "·∫®n m·∫≠t kh·∫©u" : "Hi·ªán m·∫≠t kh·∫©u"}
                  onClick={() => setShowPassword((p) => !p)}
                  className="absolute inset-y-0 right-2 flex items-center text-gray-500 hover:text-gray-700 focus:outline-none"
                >
                  {showPassword ? (
                    <EyeOff className="w-4 h-4" />
                  ) : (
                    <Eye className="w-4 h-4" />
                  )}
                </button>
              </div>
              <p className="text-xs text-gray-400 mt-1">
                √çt nh·∫•t 8 k√Ω t·ª± v√† c√≥ 1 ch·ªØ s·ªë.
              </p>
            </div>

            {/* X√°c nh·∫≠n m·∫≠t kh·∫©u */}
            <div className="mb-6">
              <label className="text-sm text-gray-600 mb-1 block font-medium">
                X√°c nh·∫≠n m·∫≠t kh·∫©u
              </label>
              <div className="relative">
                <Input
                  type={showConfirmPassword ? "text" : "password"}
                  placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                  value={confirm}
                  onChange={(e) => setConfirm(e.target.value)}
                  className={`h-12 transition-all duration-200 focus:scale-[1.02] focus:shadow-md ${
                    confirm && password && confirm !== password
                      ? "border-red-500 focus:border-red-500 focus:ring-red-500"
                      : ""
                  }`}
                  required
                />
                <button
                  tabIndex={-1}
                  type="button"
                  aria-label={
                    showConfirmPassword ? "·∫®n m·∫≠t kh·∫©u" : "Hi·ªán m·∫≠t kh·∫©u"
                  }
                  onClick={() => setShowConfirmPassword((p) => !p)}
                  className="absolute inset-y-0 right-2 flex items-center text-gray-500 hover:text-gray-700 focus:outline-none"
                >
                  {showConfirmPassword ? (
                    <EyeOff className="w-4 h-4" />
                  ) : (
                    <Eye className="w-4 h-4" />
                  )}
                </button>
              </div>
              {password && confirm && password !== confirm && (
                <p className="text-xs text-red-500 mt-1">
                  X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp.
                </p>
              )}
            </div>
            {/* Password requirements */}
            <div className="text-xs text-gray-600 bg-orange-50 p-3 rounded-lg mb-4 border border-orange-200">
              <p className="font-medium mb-1 text-orange-700">
                Y√™u c·∫ßu m·∫≠t kh·∫©u:
              </p>
              <ul className="space-y-1">
                <li
                  className={`${
                    hasDigit(password) ? "text-orange-600" : "text-gray-400"
                  }`}
                >
                  ‚Ä¢ Ch·ª©a √≠t nh·∫•t 1 k√≠ t·ª± s·ªë
                </li>
                <li
                  className={`${
                    hasMinLength(password) ? "text-orange-600" : "text-gray-400"
                  }`}
                >
                  ‚Ä¢ √çt nh·∫•t 8 k√Ω t·ª±
                </li>
                <li
                  className={`${
                    passwordsMatch(password, confirm)
                      ? "text-orange-600"
                      : "text-gray-400"
                  }`}
                >
                  ‚Ä¢ M·∫≠t kh·∫©u ph·∫£i kh·ªõp nhau
                </li>
              </ul>
            </div>

            {/* Hi·ªÉn th·ªã l·ªói */}
            {error && (
              <div className="bg-rose-50 border border-rose-200 text-rose-700 p-3 rounded-lg mb-4 text-sm font-medium animate-shake">
                {error}
              </div>
            )}

            {/* N√∫t Submit */}
            <Button
              onClick={handleSubmit}
              disabled={!canSubmit || loading} // ƒê·∫£m b·∫£o n√∫t disabled khi loading
              className={`w-full py-3 rounded-lg font-medium transition-all duration-200 transform hover:scale-[1.01] hover:shadow-lg ${
                loading
                  ? "bg-gradient-to-r from-orange-600 to-red-600 text-white opacity-70 cursor-not-allowed shadow-xl shadow-red-300/50"
                  : !canSubmit
                  ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                  : "bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 text-white shadow-xl shadow-red-300/50"
              }`}
            >
              {loading ? (
                <div className="flex items-center justify-center space-x-2">
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  <span>ƒêang x·ª≠ l√Ω...</span>
                </div>
              ) : (
                "ƒê·ªïi m·∫≠t kh·∫©u"
              )}
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}
