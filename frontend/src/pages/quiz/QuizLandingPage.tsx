import { useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import { Button } from "../../components/ui/button";
import UserCareerPath from "./UserCareerPath";
import { fetchQuestions, resetAnswer } from "../../api/quiz_api";
import type { QuizQuestion } from "../../api/quiz_api";
import { Layout } from "../../components/layout";

export default function QuizLandingPage() {
  const navigate = useNavigate();
  const [questions, setQuestions] = useState<QuizQuestion[] | null>(null);
  const [loading, setLoading] = useState(false);
  const [starting, setStarting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    let mounted = true;
    const load = async () => {
      setLoading(true);
      try {
        const data = await fetchQuestions();
        if (mounted) setQuestions(data);
      } catch (e: unknown) {
        let message = "Kh√¥ng t·∫£i ƒë∆∞·ª£c c√¢u h·ªèi";
        if (typeof e === "object" && e && "response" in e) {
          type ErrResp = { data?: { message?: string } };
          const resp = (e as { response?: ErrResp }).response;
          if (resp?.data?.message) message = resp.data.message;
        }
        if (mounted) setError(message);
      } finally {
        if (mounted) setLoading(false);
      }
    };
    load();
    return () => {
      mounted = false;
    };
  }, []);

  const handleStartQuiz = () => {
    setStarting(true);

    const isRepeat = window.confirm(
      "N·∫øu b·∫°n ƒë√£ l√†m quiz tr∆∞·ªõc ƒë√≥, nh·∫•n OK ƒë·ªÉ l√†m l·∫°i t·ª´ ƒë·∫ßu. H·ªßy ƒë·ªÉ l√†m l·∫ßn ƒë·∫ßu."
    );

    if (isRepeat) {
      // Fire-and-forget, kh√¥ng quan t√¢m k·∫øt qu·∫£
      resetAnswer().catch(() => {});
    }

    // navigate lu√¥n
    navigate("/quiz/test");
  };

  return (
    <Layout>
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 flex items-center justify-center p-4">
        <div className="max-w-4xl w-full text-center">
          {/* Hero Content */}
          <div className="mb-12">
            <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full mb-6 shadow-lg">
              <span className="text-3xl">üéØ</span>
            </div>
            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
              Kh√°m Ph√° ƒê·ªãnh H∆∞·ªõng Ngh·ªÅ Nghi·ªáp
            </h1>
            <p className="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
              Tr·∫£ l·ªùi c√°c c√¢u h·ªèi ƒë·ªÉ kh√°m ph√° nh·ªØng lƒ©nh v·ª±c ngh·ªÅ nghi·ªáp ph√π h·ª£p
              v·ªõi b·∫°n nh·∫•t
            </p>
          </div>

          {/* Quiz Info Cards */}
          <div className="grid md:grid-cols-3 gap-6 mb-12">
            <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
              <div className="text-3xl mb-4">‚è±Ô∏è</div>
              <h3 className="font-semibold text-gray-900 mb-2">
                Th·ªùi gian linh ho·∫°t
              </h3>
              <p className="text-gray-600 text-sm">
                Kh√¥ng gi·ªõi h·∫°n th·ªùi gian, b·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi tho·∫£i m√°i
              </p>
            </div>
            <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
              <div className="text-3xl mb-4">‚ùì</div>
              <h3 className="font-semibold text-gray-900 mb-2">
                {questions ? `${questions.length} c√¢u h·ªèi` : "ƒêang t·∫£i..."}
              </h3>
              <p className="text-gray-600 text-sm">
                C√¢u h·ªèi ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ hi·ªÉu r√µ s·ªü th√≠ch c·ªßa b·∫°n
              </p>
            </div>
            <div className="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
              <div className="text-3xl mb-4">üìä</div>
              <h3 className="font-semibold text-gray-900 mb-2">
                K·∫øt qu·∫£ chi ti·∫øt
              </h3>
              <p className="text-gray-600 text-sm">
                Nh·∫≠n ƒë∆∞·ª£c ph√¢n t√≠ch v√† g·ª£i √Ω ngh·ªÅ nghi·ªáp ph√π h·ª£p
              </p>
            </div>
          </div>

          {/* User saved career paths (if any) */}
          <UserCareerPath />

          {/* Start Button */}
          <div className="space-y-4">
            {loading && (
              <div className="flex items-center justify-center">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                <span className="ml-3 text-gray-600">ƒêang t·∫£i c√¢u h·ªèi...</span>
              </div>
            )}

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-red-700">
                {error}
              </div>
            )}

            {questions && !loading && (
              <Button
                onClick={handleStartQuiz}
                disabled={starting}
                size="lg"
                className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white px-8 py-4 text-lg font-semibold rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {starting ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-3"></div>
                    ƒêang kh·ªüi t·∫°o...
                  </>
                ) : (
                  "B·∫Øt ƒê·∫ßu Kh√°m Ph√° üöÄ"
                )}
              </Button>
            )}
          </div>

          {/* Additional Info */}
          <div className="mt-12 text-center">
            <p className="text-gray-500 text-sm">
              üí° G·ª£i √Ω: H√£y tr·∫£ l·ªùi m·ªôt c√°ch ch√¢n th·∫≠t ƒë·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c
              nh·∫•t
            </p>
          </div>
        </div>
      </div>
    </Layout>
  );
}
