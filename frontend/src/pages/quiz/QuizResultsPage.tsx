"use client";

import { useEffect, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { resetAnswer } from "../../api/quiz_api";
import { useNavigate } from "react-router-dom";
import { Button } from "../../components/ui/button";
import { useQuizStore } from "../../store/quiz.store";
import { Briefcase, AlertTriangle, Lightbulb, Heart, Zap } from "lucide-react";
import { Layout } from "../../components/layout";
import { createCPAPI } from "../../api/quiz_api";
import type { JobType } from "../../api/quiz_api";

export default function QuizResultsPage() {
  const navigate = useNavigate();
  const { results, isLoading, error, resetQuiz } = useQuizStore();
  const [cpLoading, setCPLoading] = useState(false);
  const [showConfirmExit, setShowConfirmExit] = useState(false);
  const [pendingAction, setPendingAction] = useState<null | (() => void)>(null);
  const [animatedCards, setAnimatedCards] = useState<Set<number>>(new Set());

  useEffect(() => {
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      e.preventDefault();
      e.returnValue = "";
    };
    window.addEventListener("beforeunload", handleBeforeUnload);
    return () => window.removeEventListener("beforeunload", handleBeforeUnload);
  }, []);

  useEffect(() => {
    results.forEach((result, index) => {
      setTimeout(() => {
        setAnimatedCards((prev) => new Set([...prev, result.id]));
      }, index * 100);
    });
  }, [results]);

  const confirmAndReset = async () => {
    await resetAnswer();
    resetQuiz();
    setShowConfirmExit(false);
    if (pendingAction) pendingAction();
  };

  const handleRetakeQuiz = () => {
    setPendingAction(() => () => navigate("/quiz"));
    setShowConfirmExit(true);
  };

  const handleExploreJobs = () => {
    setPendingAction(() => () => navigate("/jobs"));
    setShowConfirmExit(true);
  };

  const handleJobTypeClick = async (jobType: JobType) => {
    setCPLoading(true);
    try {
      await new Promise((resolve) => setTimeout(resolve, 20000));
      const careerPathData = await createCPAPI(jobType.id, jobType.job_type);
      navigate("/quiz/career-path", {
        state: { careerPath: careerPathData, isLoading: false },
      });
    } catch (err) {
      console.error("Error creating career path:", err);
      setCPLoading(false);
    }
  };

  if (isLoading) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-emerald-50">
          <div className="text-center">
            <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-200 border-t-blue-600 mx-auto mb-4"></div>
            <p className="text-gray-600">ƒêang t·∫£i k·∫øt qu·∫£...</p>
          </div>
        </div>
      </Layout>
    );
  }

  if (error) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-emerald-50">
          <div className="bg-red-50 border border-red-200 rounded-lg p-8 text-center max-w-md">
            <p className="text-red-700 mb-4">{error}</p>
            <Button onClick={() => navigate("/quiz")} variant="outline">
              Quay l·∫°i
            </Button>
          </div>
        </div>
      </Layout>
    );
  }

  if (results.length === 0) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-emerald-50">
          <Button onClick={() => navigate("/quiz")}>L√†m l·∫°i quiz</Button>
        </div>
      </Layout>
    );
  }

  const gradientColors = [
    "bg-blue-100",
    "bg-emerald-100",
    "bg-purple-100",
    "bg-orange-100",
    "bg-red-100",
    "bg-amber-100",
  ];

  return (
    <Layout>
      {/* Full Page Loading Overlay */}
      {cpLoading && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center">
          <div className="bg-white rounded-2xl shadow-2xl p-8 max-w-md mx-4 text-center">
            <div className="relative">
              <div className="animate-spin rounded-full h-20 w-20 border-4 border-blue-200 border-t-blue-600 mx-auto mb-6"></div>
              <div className="absolute inset-0 flex items-center justify-center">
                <Briefcase className="w-8 h-8 text-blue-600 animate-pulse" />
              </div>
            </div>
            <h3 className="text-xl font-bold text-gray-900 mb-2">
              ƒêang t·∫°o l·ªô tr√¨nh ngh·ªÅ nghi·ªáp
            </h3>
            <p className="text-gray-600 mb-4">Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...</p>
            <div className="flex items-center justify-center gap-1">
              <div
                className="w-2 h-2 bg-blue-600 rounded-full animate-bounce"
                style={{ animationDelay: "0ms" }}
              ></div>
              <div
                className="w-2 h-2 bg-blue-600 rounded-full animate-bounce"
                style={{ animationDelay: "150ms" }}
              ></div>
              <div
                className="w-2 h-2 bg-blue-600 rounded-full animate-bounce"
                style={{ animationDelay: "300ms" }}
              ></div>
            </div>
            <p className="text-sm text-gray-500 mt-4">
              Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t 20-60 gi√¢y
            </p>
          </div>
        </div>
      )}

      <div
        className={`min-h-screen py-12 bg-white ${
          cpLoading ? "pointer-events-none select-none" : ""
        }`}
      >
        <div className="text-center max-w-8xl mb-12">
          <div className="flex flex-col items-center justify-center gap-3 py-4 px-4">
            <h1 className="text-3xl pb-2 sm:text-4xl md:text-5xl font-bold text-center bg-gradient-to-r from-blue-600 to-emerald-600 bg-clip-text text-transparent">
              K·∫øt Qu·∫£ ƒê·ªãnh H∆∞·ªõng Ngh·ªÅ Nghi·ªáp
            </h1>
            <p className="text-base sm:text-lg md:text-xl text-gray-700 text-center max-w-3xl">
              D·ª±a tr√™n c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n, ƒë√¢y l√† nh·ªØng lƒ©nh v·ª±c ngh·ªÅ nghi·ªáp
              ph√π h·ª£p nh·∫•t v·ªõi b·∫°n
            </p>
          </div>

          <div className="bg-blue-50 border-l-4 border-blue-600 rounded-lg p-4 max-w-6xl mx-auto mb-8">
            <p className="text-gray-800 text-sm sm:text-base">
              <span className="font-semibold text-blue-600">üí° H∆∞·ªõng d·∫´n:</span>{" "}
              D∆∞·ªõi ƒë√¢y l√† c√°c k·∫øt qu·∫£ ƒë·ªãnh h∆∞·ªõng v·ªõi nh·ªØng chuy√™n ng√†nh r√µ r√†ng.
              Khi b·∫°n click v√†o m·ªôt chuy√™n ng√†nh, h·ªá th·ªëng s·∫Ω t·∫°o l·ªô tr√¨nh ngh·ªÅ
              nghi·ªáp chi ti·∫øt cho b·∫°n. Qu√° tr√¨nh n√†y s·∫Ω m·∫•t kho·∫£ng{" "}
              <span className="font-semibold">20</span> -{" "}
              <span className="font-semibold">60</span> gi√¢y ƒë·ªÉ x·ª≠ l√Ω.
            </p>
          </div>
        </div>

        <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="space-y-8 mb-12">
            {results.map((result, resultIndex) => (
              <div
                key={result.id}
                className={`transform transition-all duration-700 mb-30 ${
                  animatedCards.has(result.id)
                    ? "opacity-100 translate-y-0"
                    : "opacity-0 translate-y-8"
                } ${cpLoading ? "opacity-50" : ""}`}
              >
                {/* Category Header */}
                <div className="mb-6">
                  <h2 className="text-2xl sm:text-3xl text-center font-bold text-gray-900 mb-2">
                    {result.job_category}
                  </h2>
                  <p className="text-gray-600 text-center sm:text-lg">
                    {result.description}
                  </p>
                </div>

                <div className="grid grid-cols-1 text-center sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
                  {result.job_types.map(
                    (jobType: JobType, jobIndex: number) => {
                      const bgColor =
                        gradientColors[
                          (resultIndex * 3 + jobIndex) % gradientColors.length
                        ];

                      return (
                        <div
                          key={jobType.id}
                          onClick={() =>
                            !cpLoading && handleJobTypeClick(jobType)
                          }
                          className={`group relative overflow-hidden rounded-xl p-6 transition-all duration-300 transform ${
                            cpLoading
                              ? "cursor-not-allowed"
                              : "cursor-pointer hover:scale-105 hover:shadow-lg"
                          } ${bgColor} flex flex-col`}
                          style={{ minHeight: "14rem" }}
                        >
                          {/* Overlay hover */}
                          <div className="absolute inset-0 bg-gradient-to-br from-white/0 to-white/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>

                          {/* N·ªôi dung card - c·∫•u tr√∫c c·ªë ƒë·ªãnh */}
                          <div className="relative z-10 flex flex-col h-full">
                            {/* Title - c·ªë ƒë·ªãnh ·ªü tr√™n */}
                            <h3 className="font-bold text-lg text-gray-900 mb-3 min-h-[3.5rem] flex items-center justify-center">
                              {jobType.job_type}
                            </h3>

                            {/* Description - chi·∫øm kh√¥ng gian gi·ªØa */}
                            <p className="text-gray-700 text-sm leading-relaxed mb-4 flex-grow line-clamp-4">
                              {jobType.description}
                            </p>

                            {/* Button - c·ªë ƒë·ªãnh ·ªü d∆∞·ªõi */}
                            <div className="mt-auto pt-4 border-t border-gray-300/50">
                              <div className="flex items-center justify-center gap-2 text-gray-700 font-semibold group-hover:gap-3 transition-all">
                                <span>T·∫°o l·ªô tr√¨nh ngay</span>
                                <span className="inline-block group-hover:translate-x-1 transition-transform">
                                  ‚Üí
                                </span>
                              </div>
                            </div>
                          </div>
                        </div>
                      );
                    }
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="w-7xl mx-auto my-6 border-t-3 border-gray-300"></div>

        <div className="max-w-5xl mx-auto pt-10 pb-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
            {/* Tips h·ªçc t·∫≠p */}
            <div className="bg-white rounded-xl border-2 shadow-sm p-6 border-l-10 border-emerald-500">
              <div className="flex items-center gap-3 mb-4">
                <Lightbulb className="w-6 h-6 text-emerald-600" />
                <h3 className="text-xl font-bold text-gray-900">
                  Tips H·ªçc T·∫≠p
                </h3>
              </div>
              <ul className="space-y-3 text-gray-700">
                <li className="flex gap-3">
                  <span className="text-emerald-600 font-bold">‚Ä¢</span>
                  <span>
                    B·∫Øt ƒë·∫ßu v·ªõi c√°c kh√≥a h·ªçc c∆° b·∫£n ƒë·ªÉ x√¢y d·ª±ng n·ªÅn t·∫£ng v·ªØng
                    ch·∫Øc
                  </span>
                </li>
                <li className="flex gap-3">
                  <span className="text-emerald-600 font-bold">‚Ä¢</span>
                  <span>Th·ª±c h√†nh th∆∞·ªùng xuy√™n qua c√°c d·ª± √°n th·ª±c t·∫ø</span>
                </li>
                <li className="flex gap-3">
                  <span className="text-emerald-600 font-bold">‚Ä¢</span>
                  <span>Tham gia c·ªông ƒë·ªìng ƒë·ªÉ h·ªçc h·ªèi t·ª´ nh·ªØng ng∆∞·ªùi kh√°c</span>
                </li>
                <li className="flex gap-3">
                  <span className="text-emerald-600 font-bold">‚Ä¢</span>
                  <span>ƒê·∫∑t m·ª•c ti√™u r√µ r√†ng v√† theo d√µi ti·∫øn ƒë·ªô c·ªßa b·∫°n</span>
                </li>
              </ul>
            </div>

            {/* T√≠nh c√°ch n√≥i l√™n ƒëi·ªÅu g√¨ */}
            <div className="bg-white rounded-xl border-2 shadow-sm p-6 border-l-10 border-blue-500">
              <div className="flex items-center gap-3 mb-4">
                <Heart className="w-6 h-6 text-blue-600" />
                <h3 className="text-xl font-bold text-gray-900">
                  T√≠nh C√°ch B·∫°n N√≥i L√™n ƒêi·ªÅu G√¨
                </h3>
              </div>
              <ul className="space-y-3 text-gray-700">
                <li className="flex gap-3">
                  <span className="text-blue-600 font-bold">‚Ä¢</span>
                  <span>
                    B·∫°n c√≥ kh·∫£ nƒÉng ph√¢n t√≠ch v√† gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ t·ªët
                  </span>
                </li>
                <li className="flex gap-3">
                  <span className="text-blue-600 font-bold">‚Ä¢</span>
                  <span>B·∫°n c√≥ s·ª± ki√™n tr√¨ v√† quy·∫øt t√¢m trong c√¥ng vi·ªác</span>
                </li>
                <li className="flex gap-3">
                  <span className="text-blue-600 font-bold">‚Ä¢</span>
                  <span>B·∫°n c√≥ kh·∫£ nƒÉng h·ªçc h·ªèi nhanh ch√≥ng</span>
                </li>
                <li className="flex gap-3">
                  <span className="text-blue-600 font-bold">‚Ä¢</span>
                  <span>B·∫°n c√≥ t∆∞ duy s√°ng t·∫°o v√† linh ho·∫°t</span>
                </li>
              </ul>
            </div>
          </div>
        </div>

        {/* BUTTON */}
        <div className="flex flex-col sm:flex-row gap-4 py-10 justify-center">
          <Button
            onClick={handleExploreJobs}
            size="lg"
            variant={"emerald"}
            className="rounded-2xl"
            disabled={cpLoading}
          >
            <Briefcase className="w-5 h-5 mr-2" />
            Kh√°m Ph√° Vi·ªác L√†m
          </Button>

          <Button
            onClick={handleRetakeQuiz}
            size="lg"
            variant="default"
            className="rounded-2xl"
            disabled={cpLoading}
          >
            <Zap className="w-5 h-5 mr-2" />
            L√†m L·∫°i B√†i Quiz
          </Button>
        </div>
      </div>

      <Dialog open={showConfirmExit} onOpenChange={setShowConfirmExit}>
        <DialogContent className="max-w-sm">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2 text-red-600">
              <AlertTriangle className="w-5 h-5" /> R·ªùi kh·ªèi trang?
            </DialogTitle>
          </DialogHeader>
          <p className="text-gray-700">
            B·∫°n ch∆∞a ch·ªçn l·ªô tr√¨nh ngh·ªÅ nghi·ªáp. N·∫øu tho√°t, d·ªØ li·ªáu c√¢u tr·∫£ l·ªùi
            s·∫Ω b·ªã <b>x√≥a to√†n b·ªô</b>. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t kh√¥ng?
          </p>
          <DialogFooter className="mt-4 flex justify-end gap-3">
            <Button variant="outline" onClick={() => setShowConfirmExit(false)}>
              ·ªû l·∫°i
            </Button>
            <Button
              className="bg-red-600 hover:bg-red-700 text-white"
              onClick={confirmAndReset}
            >
              Tho√°t & X√≥a d·ªØ li·ªáu
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </Layout>
  );
}
