import { useEffect, useState } from "react";
import {
  auth,
  RecaptchaVerifier,
  signInWithPhoneNumber,
} from "../../config/firebase.config"; // ‚úÖ C·∫≠p nh·∫≠t path import
import axiosConfig from "../../config/axios.config";

declare global {
  interface Window {
    recaptchaVerifier?: RecaptchaVerifier;
  }
}

// ‚ö†Ô∏è CH√ö √ù: T√¥i ƒë√£ th√™m m·ªôt div nh·ªè ƒë·ªÉ hi·ªán th·ªã l·ªói n·∫øu c√≥, thay v√¨ d√πng alert.
// Tuy nhi√™n, t√¥i v·∫´n gi·ªØ alert theo y√™u c·∫ßu, ch·ªâ th√™m state error.
export default function VerifyPhone() {
  const [phone, setPhone] = useState("");
  const [otp, setOtp] = useState("");
  const [confirmationResult, setConfirmationResult] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const [errorMsg, setErrorMsg] = useState(""); // State ƒë·ªÉ hi·ªÉn th·ªã l·ªói
  const [isRecaptchaReady, setIsRecaptchaReady] = useState(false); // State m·ªõi

  // ‚úÖ Debug: Log Firebase config
  useEffect(() => {
    // ƒêo·∫°n code n√†y ch·ªâ ch·∫°y khi component mount l·∫ßn ƒë·∫ßu
    console.log("üîß Firebase Auth initialized:", auth);
    console.log("üîß Auth domain:", auth.config.authDomain);
    console.log("üîß API Key:", auth.config.apiKey ? "‚úÖ Exists" : "‚ùå Missing");
  }, []);

  // ‚úÖ T·∫°o reCAPTCHA m·ªôt l·∫ßn khi component mount
  useEffect(() => {
    const initRecaptcha = () => {
      try {
        // X√≥a container c≈© n·∫øu c√≥ (an to√†n khi refresh nhanh)
        const container = document.getElementById("recaptcha-container");
        if (container) {
          container.innerHTML = "";
        }

        if (!window.recaptchaVerifier) {
          console.log("üîß Initializing reCAPTCHA (Visible)...");
          // ReCAPTCHA ch·ªâ ƒë∆∞·ª£c t·∫°o m·ªôt l·∫ßn v√† hi·ªán ra
          window.recaptchaVerifier = new RecaptchaVerifier(
            auth,
            "recaptcha-container",
            {
              size: "normal", // D√πng normal (Visible)
              callback: (response: any) => {
                console.log("‚úÖ reCAPTCHA solved automatically:", response);
                // V·ªõi size normal, callback n√†y ch·ªâ ch·∫°y khi ng∆∞·ªùi d√πng tick v√†o
                setIsRecaptchaReady(true);
              },
              "expired-callback": () => {
                console.log("‚ö†Ô∏è reCAPTCHA expired, need to re-verify");
                setIsRecaptchaReady(false);
                setErrorMsg("reCAPTCHA ƒë√£ h·∫øt h·∫°n. Vui l√≤ng tick l·∫°i.");
              },
            }
          );

          // Render reCAPTCHA ngay l·∫≠p t·ª©c
          window.recaptchaVerifier.render().then(() => {
            console.log("‚úÖ reCAPTCHA initialized and rendered successfully");
            // V√¨ n√≥ l√† size "normal", ta v·∫´n c·∫ßn ng∆∞·ªùi d√πng tick v√†o, nh∆∞ng coi nh∆∞ ƒë√£ s·∫µn s√†ng hi·ªÉn th·ªã.
            setIsRecaptchaReady(true);
          });
        }
      } catch (error) {
        console.error("‚ùå reCAPTCHA init error:", error);
        setErrorMsg("L·ªói kh·ªüi t·∫°o reCAPTCHA. Ki·ªÉm tra Console.");
        setIsRecaptchaReady(false);
      }
    };

    initRecaptcha();

    // Cleanup: D·ªçn d·∫πp reCAPTCHA khi component unmount
    return () => {
      if (window.recaptchaVerifier) {
        try {
          console.log("üßπ Cleaning up reCAPTCHA...");
          window.recaptchaVerifier.clear();
          window.recaptchaVerifier = undefined;
          setIsRecaptchaReady(false);
        } catch (e) {
          console.log("Cleanup error (ignorable):", e);
        }
      }
    };
  }, []);

  const sendOTP = async () => {
    setErrorMsg(""); // Reset l·ªói
    if (!phone) {
      alert("Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!");
      return;
    }

    // 1. L·∫•y reCAPTCHA Verifier ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
    const appVerifier = window.recaptchaVerifier;

    // Trong ch·∫ø ƒë·ªô "normal", reCAPTCHA ƒë√£ s·∫µn s√†ng hi·ªÉn th·ªã (isRecaptchaReady=true),
    // nh∆∞ng Firebase v·∫´n c·∫ßn th·∫•y ng∆∞·ªùi d√πng ƒë√£ gi·∫£i m√£ CAPTCHA (th√¥ng qua token).
    if (!appVerifier || !isRecaptchaReady) {
      const msg =
        "L·ªói h·ªá th·ªëng: reCAPTCHA ch∆∞a s·∫µn s√†ng. Vui l√≤ng t·∫£i l·∫°i trang.";
      setErrorMsg(msg);
      alert(msg);
      return;
    }

    // üí° V·ªõi reCAPTCHA VISIBLE, ng∆∞·ªùi d√πng ph·∫£i t∆∞∆°ng t√°c b·∫±ng c√°ch T√çCH CH·ªåN.
    // N·∫øu ch∆∞a t√≠ch ch·ªçn (ho·∫∑c token h·∫øt h·∫°n), Firebase s·∫Ω y√™u c·∫ßu ng∆∞·ªùi d√πng x√°c minh.

    console.log("üì± Starting OTP send process...");
    console.log("üì± Input phone:", phone);

    try {
      setLoading(true);

      // 2. Format s·ªë ƒëi·ªán tho·∫°i (Quan tr·ªçng!)
      const formattedPhone = phone.startsWith("+")
        ? phone
        : `+84${phone.startsWith("0") ? phone.slice(1) : phone}`;

      console.log("üìû Formatted phone:", formattedPhone);
      console.log("üìû Calling signInWithPhoneNumber...");

      const result = await signInWithPhoneNumber(
        auth,
        formattedPhone,
        appVerifier
      );

      console.log("‚úÖ signInWithPhoneNumber result:", result);
      setConfirmationResult(result);
      alert("üì© OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i! (Ki·ªÉm tra CAPTCHA n·∫øu ch∆∞a g·ª≠i)");
    } catch (error: any) {
      console.error("‚ùå Full error object:", error);

      let errorText =
        "L·ªói g·ª≠i OTP. Vui l√≤ng ki·ªÉm tra Console (F12) ƒë·ªÉ bi·∫øt chi ti·∫øt. ";

      switch (error.code) {
        case "auth/invalid-app-credential":
          errorText =
            "‚ùå L·ªói c·∫•u h√¨nh Domain ho·∫∑c API Key! Vui l√≤ng ki·ªÉm tra l·∫°i: \n" +
            "1. Authorized domains (Firebase Console).\n" +
            "2. Identity Toolkit API (Google Cloud Console/API Key).";
          break;
        case "auth/captcha-check-failed":
          errorText =
            "‚ùå X√°c minh reCAPTCHA th·∫•t b·∫°i. Vui l√≤ng T√çCH CH·ªåN √¥ I'm not a robot!";
          break;
        case "auth/invalid-phone-number":
          errorText =
            "‚ùå S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá! ƒê·ªãnh d·∫°ng: 0xxxxxxxxx ho·∫∑c +84xxxxxxxxx";
          break;
        case "auth/too-many-requests":
          errorText = "‚ùå Qu√° nhi·ªÅu y√™u c·∫ßu. Th·ª≠ l·∫°i sau v√†i ph√∫t!";
          break;
        default:
          errorText += `Code: ${error.code} | Message: ${error.message}`;
      }

      setErrorMsg(errorText);
      alert(errorText); // D√πng alert theo y√™u c·∫ßu ban ƒë·∫ßu
    } finally {
      setLoading(false);
    }
  };

  const verifyOTP = async () => {
    setErrorMsg(""); // Reset l·ªói
    if (!confirmationResult) {
      alert("G·ª≠i OTP tr∆∞·ªõc!");
      return;
    }
    if (!otp) {
      alert("Nh·∫≠p m√£ OTP!");
      return;
    }

    console.log("üîê Verifying OTP:", otp);

    try {
      setLoading(true);
      const result = await confirmationResult.confirm(otp);
      const user = result.user;
      const idToken = await user.getIdToken();

      console.log("‚úÖ OTP verified, user:", user);

      // G·ª≠i token cho backend ƒë·ªÉ x√°c minh
      const res = await axiosConfig.post("/verify-sms", { token: idToken });

      if (res.data.success) {
        alert("‚úÖ X√°c minh th√†nh c√¥ng!");
        // Reset form
        setPhone("");
        setOtp("");
        setConfirmationResult(null);
      } else {
        alert("‚ùå X√°c minh th·∫•t b·∫°i!");
      }
    } catch (error: any) {
      console.error("‚ùå Verification error:", error);

      let errorText =
        "L·ªói x√°c minh. Vui l√≤ng ki·ªÉm tra Console (F12) ƒë·ªÉ bi·∫øt chi ti·∫øt. ";

      switch (error.code) {
        case "auth/invalid-verification-code":
          errorText = "‚ùå M√£ OTP kh√¥ng ƒë√∫ng!";
          break;
        case "auth/code-expired":
          errorText = "‚ùå M√£ OTP ƒë√£ h·∫øt h·∫°n!";
          break;
        default:
          errorText += error.message;
      }

      setErrorMsg(errorText);
      alert(errorText);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-4 max-w-sm mx-auto bg-white shadow-xl rounded-xl">
      <h2 className="text-xl font-bold text-center mb-4 text-gray-800">
        X√°c th·ª±c s·ªë ƒëi·ªán tho·∫°i
      </h2>

      <div className="mb-4">
        <small className="text-sm text-gray-500 block text-center">
          M·ªü Console (F12) ƒë·ªÉ xem debug logs. Vui l√≤ng **T√çCH CH·ªåN** reCAPTCHA
          b√™n d∆∞·ªõi!
        </small>
        {errorMsg && (
          <div className="mt-2 p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg text-sm whitespace-pre-wrap">
            {errorMsg}
          </div>
        )}
      </div>

      {/* ƒê√¢y l√† n∆°i reCAPTCHA Visible s·∫Ω ƒë∆∞·ª£c attach */}
      <div id="recaptcha-container" className="mb-4 flex justify-center"></div>

      <input
        type="text"
        placeholder="V√≠ d·ª•: 0334327096"
        value={phone}
        onChange={e => setPhone(e.target.value)}
        disabled={loading || !!confirmationResult}
        className="mb-4 p-3 w-full border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-150"
      />
      <button
        onClick={sendOTP}
        disabled={loading || !!confirmationResult || !isRecaptchaReady}
        className={`p-3 w-full rounded-lg font-semibold transition duration-150 ease-in-out ${
          loading || !!confirmationResult || !isRecaptchaReady
            ? "bg-gray-400 text-gray-600 cursor-not-allowed"
            : "bg-blue-600 text-white hover:bg-blue-700 shadow-md"
        }`}
      >
        {loading ? "ƒêang g·ª≠i..." : "G·ª≠i OTP"}
      </button>

      {confirmationResult && (
        <>
          <input
            type="text"
            placeholder="Nh·∫≠p m√£ OTP"
            value={otp}
            onChange={e => setOtp(e.target.value)}
            disabled={loading}
            className="mt-4 p-3 w-full border border-gray-300 rounded-lg focus:ring-green-500 focus:border-green-500 transition duration-150"
          />
          <button
            onClick={verifyOTP}
            disabled={loading}
            className={`p-3 w-full rounded-lg font-semibold transition duration-150 ease-in-out mt-2 ${
              loading
                ? "bg-gray-400 text-gray-600 cursor-not-allowed"
                : "bg-green-600 text-white hover:bg-green-700 shadow-md"
            }`}
          >
            {loading ? "ƒêang x√°c minh..." : "X√°c minh OTP"}
          </button>
        </>
      )}
    </div>
  );
}
